{"version":3,"sources":["components/Form_travel_ui.jsx","components/MemeGeneratorHeader.jsx","components/Form_travel.jsx","components/MemeStart.jsx","components/MemeGenerator.jsx","App.js","serviceWorker.js","index.js"],"names":["Form_travel_ui","state","Fragment","name","value","this","props","data","firstName","onChange","handleChange","placeholder","lastName","age","type","destination","gender","isVegan","isKosher","isLactoseFree","Component","MemeGeneratorHeader","className","src","alt","MemeStart","style","display","isStarted","onClick","handleStartBtn","MemeGenerator","isLoading","topText","bottomText","randomImg","allMemeImgs","e","target","setState","handleImg","preventDefault","random","Math","floor","length","url","fetch","then","resolve","json","console","log","memes","App","prevState","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.04533cbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Form_travel_ui extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <form>\r\n          <input\r\n            name=\"firstName\"\r\n            value={this.props.data.firstName}\r\n            onChange={this.props.handleChange}\r\n            placeholder=\"First Name\"\r\n          />\r\n          <br />\r\n          <input\r\n            name=\"lastName\"\r\n            value={this.props.data.lastName}\r\n            onChange={this.props.handleChange}\r\n            placeholder=\"Last Name\"\r\n          />\r\n          <br />\r\n          <input\r\n            name=\"age\"\r\n            value={this.props.data.age}\r\n            onChange={this.props.handleChange}\r\n            placeholder=\"age\"\r\n          />\r\n          <br />\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"gender\"\r\n              value=\"male\"\r\n              //checked={this.state.gender === 'male'}\r\n              onChange={this.props.handleChange}\r\n            />{' '}\r\n            Male\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"gender\"\r\n              value=\"female\"\r\n              //checked={this.state.gender === 'female'}\r\n              onChange={this.props.handleChange}\r\n            />{' '}\r\n            Female\r\n          </label>\r\n          <br />\r\n          <select\r\n            name=\"destination\"\r\n            value={this.props.data.destination}\r\n            onChange={this.props.handleChange}\r\n          >\r\n            <option value=\"\">-- Please Choose a Destination --</option>\r\n            <option value=\"germany\">Germany</option>\r\n            <option value=\"norway\">Norway</option>\r\n            <option value=\"north pole\">North pole</option>\r\n            <option value=\"south pole\">South pole</option>\r\n          </select>\r\n          <br />\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"isVegan\"\r\n              onChange={this.props.handleChange}\r\n              //checked={this.state.dietaryRestrictions.isVegan}\r\n            />\r\n            Vegan?\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"isKosher\"\r\n              onChange={this.props.handleChange}\r\n              //checked={this.state.dietaryRestrictions.isKosher}\r\n            />\r\n            Kosher?\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"isLactoseFree\"\r\n              onChange={this.props.handleChange}\r\n              //checked={this.state.dietaryRestrictions.isLactoseFree}\r\n            />\r\n            Lactose Free?\r\n          </label>\r\n        </form>\r\n        <hr />\r\n        <h2>Entered information:</h2>\r\n        <p>\r\n          Your name: {this.props.data.firstName} {this.props.data.lastName}\r\n        </p>\r\n        <p>Your age: {this.props.data.age}</p>\r\n        <p>Your gender: {this.props.data.gender}</p>\r\n        <p>Your destination: {this.props.data.destination}</p>\r\n        <p>Your dietary restrictions: </p>\r\n        <p>Vegan: {this.props.data.isVegan ? 'yes' : 'no'}</p>\r\n        <p>Kosher: {this.props.data.isKosher ? 'yes' : 'no'}</p>\r\n        <p>Lactose Free: {this.props.data.isLactoseFree ? 'yes' : 'no'}</p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form_travel_ui;\r\n","import React, { Component } from 'react';\r\n\r\nclass MemeGeneratorHeader extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1 className=\"header\">\r\n          <img\r\n            className=\"troll-face\"\r\n            src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n            alt=\"\"\r\n          />\r\n          Meme Generator\r\n        </h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGeneratorHeader;\r\n","import React, { Component } from 'react';\r\nimport Form_travel_ui from './Form_travel_ui';\r\n\r\nclass Form_travel extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoading: true,\r\n      firstName: '',\r\n      lastName: '',\r\n      age: '',\r\n      gender: '',\r\n      destination: '',\r\n      isVegan: false,\r\n      isKosher: false,\r\n      isLactoseFree: false,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isLoading: false,\r\n      });\r\n    }, 2000);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value, type, checked } = event.target;\r\n    type === 'checkbox'\r\n      ? this.setState({\r\n          [name]: checked,\r\n        })\r\n      : this.setState({\r\n          [name]: value,\r\n        });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isLoading ? (\r\n          <h1>Loading ......</h1>\r\n        ) : (\r\n          <Form_travel_ui handleChange={this.handleChange} data={this.state} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form_travel;\r\n","import React, { Component } from 'react';\r\n\r\nclass MemeStart extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"start-btn\"\r\n        style={{ display: this.props.isStarted && 'none' }}\r\n        onClick={this.props.handleStartBtn}\r\n      >\r\n        START\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeStart;\r\n","import React, { Component } from 'react';\r\n\r\nclass MemeGenerator extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    topText: '',\r\n    bottomText: '',\r\n    randomImg: 'http://i.imgflip.com/1bij.jpg',\r\n    allMemeImgs: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    // where you bring data from\r\n    fetch('https://api.imgflip.com/get_memes')\r\n      .then((resolve) => resolve.json()) // turn the data into javaScript obj\r\n      .then((resolve) => {\r\n        console.log(resolve);\r\n        const { memes } = resolve.data;\r\n        this.setState({ allMemeImgs: memes });\r\n      });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    // const state = { ...this.state };\r\n    // state[name] = value;\r\n    // this.setState({...state})\r\n    this.setState({ [name]: value });\r\n    // both ways work\r\n  };\r\n\r\n  handleImg = (e) => {\r\n    e.preventDefault();\r\n    const random = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n    const randomImg = this.state.allMemeImgs[random].url;\r\n    const state = { ...this.state };\r\n    state.randomImg = randomImg;\r\n    this.setState({ ...state });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <form className=\"meme-form\">\r\n          <label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"topText\"\r\n              placeholder=\"Top Text\"\r\n              value={this.state.topText}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"bottomText\"\r\n              placeholder=\"Bottom Text\"\r\n              value={this.state.bottomText}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button\r\n            className={\r\n              this.state.topText && this.state.bottomText ? 'btn btn-on' : 'btn'\r\n            }\r\n            onClick={this.handleImg}\r\n          >\r\n            Gen\r\n          </button>\r\n        </form>\r\n        <div className=\"meme\">\r\n          <img src={this.state.randomImg} alt=\"\" />\r\n          <h2 className=\"text-top\">{this.state.topText}</h2>\r\n          <h2 className=\"text-bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React, { Component } from 'react';\nimport Form_travel from './components/Form_travel';\nimport MemeGeneratorHeader from './components/MemeGeneratorHeader';\nimport MemeStart from './components/MemeStart';\nimport MemeGenerator from './components/MemeGenerator';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    isLoading: true,\n    isStarted: false,\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        isLoading: false,\n      });\n    }, 2000);\n  }\n\n  handleStartBtn = () => {\n    this.setState((prevState) => {\n      return {\n        isStarted: !prevState.isStarted,\n      };\n    });\n    console.log(this.state.isStarted);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MemeGeneratorHeader />\n        {this.state.isLoading ? (\n          <h1>Loading ...</h1>\n        ) : (\n          <MemeStart\n            isStarted={this.state.isStarted}\n            handleStartBtn={this.handleStartBtn}\n          />\n        )}\n        {this.state.isStarted ? <MemeGenerator /> : null}\n        <br />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}